require 'rails_helper'

RSpec.describe GenerateTeamBlogJob, type: :job do
  include ActiveJob::TestHelper

  let(:team_name) { "TestTeam" }
  let(:mock_client) { instance_double(Ai::Client) }
  let(:team_summary) { create(:team_summary, team_name: team_name) }
  let(:blog_content) { "# Sample Blog Post\n\nThis is a sample blog post generated by AI." }

  before do
    allow(Ai::Client).to receive(:new).and_return(mock_client)
    allow(mock_client).to receive(:generate_team_blog).and_return(blog_content)
  end

  describe "#perform" do
    context "with a successful team summary" do
      before do
        team_summary # Create the team summary
        team_summary.update!(status: "success") # Ensure the summary is successful
      end

      it "creates a team blog with the AI result" do
        expect {
          GenerateTeamBlogJob.perform_now(team_name)
        }.to change { TeamBlog.count }.by(1)

        blog = TeamBlog.find_by(team_name: team_name)
        expect(blog.status).to eq("success")
        expect(blog.content).to eq(blog_content)
      end
    end

    context "without a team summary" do
      it "creates a failed blog" do
        expect {
          GenerateTeamBlogJob.perform_now(team_name)
        }.to change { TeamBlog.count }.by(1)

        blog = TeamBlog.find_by(team_name: team_name)
        expect(blog.status).to eq("failed")
        expect(blog.content).to include("No successful team summary found")
      end
    end

    context "when AI client raises an error" do
      before do
        team_summary # Create the team summary
        team_summary.update!(status: "success") # Ensure the summary is successful

        allow(mock_client).to receive(:generate_team_blog).and_raise(StandardError.new("API error"))
      end

      it "creates a failed blog" do
        expect {
          GenerateTeamBlogJob.perform_now(team_name)
        }.to change { TeamBlog.count }.by(1)

        blog = TeamBlog.find_by(team_name: team_name)
        expect(blog.status).to eq("failed")
        expect(blog.content).to include("Error:")
      end
    end
  end
end
